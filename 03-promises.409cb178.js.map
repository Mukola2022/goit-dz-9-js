{"version":3,"sources":["js/03-promises.js"],"names":["inputFirstDelay","document","querySelector","inputStepDelay","inputAmount","btnSubmit","form","handleFormSubmit","event","preventDefault","amount","delay","step","target","elements","firstDelay","Number","value","i","createPromise","then","position","renderField","catch","Promise","resolve","reject","setTimeout","Math","random","message","ul","createElement","body","append","style","listStyle","li","textContent","remove","floor","addEventListener"],"mappings":";AAAA,MAAMA,EAAkBC,SAASC,cAAc,uBACnCC,EAAiBF,SAASC,cAAc,sBACxCE,EAAcH,SAASC,cAAc,wBACrCG,EAAYJ,SAASC,cAAc,UAGnCI,EAAOL,SAASC,cAAc,SAGtC,SAASK,EAAkBC,GACzBA,EAAMC,iBACA,MAAA,OAACC,EAAD,MAASC,EAAT,KAAgBC,GAAQJ,EAAMK,OAAOC,SACvCC,IAAAA,EAAaC,OAAOL,EAAMM,OAGzB,IAAA,IAAIC,EAAI,EAAGA,GAAKR,EAAOO,MAAOC,IACjCC,EAAcD,EAAGH,GACdK,KAAK,EAAGC,SAAAA,EAAUV,MAAAA,KAAcW,0BAAoCD,QAAeV,SAEnFY,MAAM,EAAGF,SAAAA,EAAUV,MAAAA,KAAaW,wBAAkCD,QAAeV,QAGpFI,GAAYC,OAAOJ,EAAKK,OAM5B,SAASE,EAAcE,EAAUV,GACtB,OAAA,IAAIa,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAACJ,SAAAA,EAASV,MAAAA,IAGlBe,EAAO,CAACL,SAAAA,EAASV,MAAAA,KAGlBA,KAIN,SAASW,EAAYQ,GACbC,MAAAA,EAAK9B,SAAS+B,cAAc,MAClC/B,SAASgC,KAAKC,OAAOH,GACrBA,EAAGI,MAAMC,UAAY,OACfC,MAAAA,EAAKpC,SAAS+B,cAAc,MAClCK,EAAGC,YAAcR,EACjBC,EAAGG,OAAOG,GACVV,WAAW,KACTI,EAAGQ,UACDX,KAAKY,MAAMxB,OAAOhB,EAAgBiB,OAASD,OAAOb,EAAec,QAAUD,OAAOZ,EAAYa,QA7CvGX,EAAKmC,iBAAiB,SAAUlC","file":"03-promises.409cb178.js","sourceRoot":"../src","sourcesContent":["const inputFirstDelay = document.querySelector('input[name=\"delay\"]')\n      const inputStepDelay = document.querySelector('input[name=\"step\"]')\n      const inputAmount = document.querySelector('input[name=\"amount\"]')\n      const btnSubmit = document.querySelector('button')\n\n\n      const form = document.querySelector(\".form\");\n    form.addEventListener(\"submit\", handleFormSubmit)\n\n    function handleFormSubmit (event) {\n      event.preventDefault();\n      const {amount, delay, step} = event.target.elements;\n      let firstDelay = Number(delay.value);\n\n\n      for (let i = 1; i <= amount.value; i++) {\n        createPromise(i, firstDelay)\n          .then(({ position, delay }) =>   renderField(` ✅ Fulfilled promise ${position} in ${delay}ms `))\n\n          .catch(({ position, delay }) =>  renderField(`❌ Rejected promise ${position} in ${delay}ms`)\n\n           );\n        firstDelay+=Number(step.value)\n\n        }\n      \n    };\n\n    function createPromise(position, delay) {\n        return new Promise((resolve, reject) => {\n          setTimeout(() => {\n            const shouldResolve = Math.random() > 0.3;\n            if (shouldResolve) {\n              resolve({position,delay})\n\n            } else {\n              reject({position,delay})\n\n            }\n          }, delay)})\n\n      };\n\n       function renderField(message) {\n         const ul = document.createElement('ul');\n         document.body.append(ul);\n         ul.style.listStyle = 'none';\n         const li = document.createElement('li');\n         li.textContent = message;\n         ul.append(li);\n         setTimeout(() => {\n           ul.remove();\n         },  Math.floor(Number(inputFirstDelay.value) + Number(inputStepDelay.value)) * Number(inputAmount.value));\n\n      }\n"]}