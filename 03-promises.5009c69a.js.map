{"version":3,"sources":["js/03-promises.js"],"names":["refs","inputFirstDelay","document","querySelector","inputStepDelay","inputAmount","btnSubmit","form","hendlChange","e","preventDefault","addEventListener","delay","value","position","createPromise","Promise","resolve","reject","setTimeout","Math","random","i","setInterval","then","catch","console","log"],"mappings":";AAAA,MAAMA,EAAO,CACXC,gBAAiBC,SAASC,cAAc,uBACxCC,eAAgBF,SAASC,cAAc,sBACvCE,YAAaH,SAASC,cAAc,wBACpCG,UAAWJ,SAASC,cAAc,UAClCI,KAAML,SAASC,cAAc,UAG/B,SAASK,EAAYC,GACnBA,EAAEC,iBAFJV,EAAKO,KAAKI,iBAAiB,QAASH,GAIpC,IAAII,EAAQZ,EAAKC,gBAAgBY,MAC7BC,EAAW,EAIf,SAASC,EAAcD,EAAUF,GACf,IAAII,QAAQ,CAACC,EAASC,KACpCC,WAAW,KACaC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,SAAAA,EAAUF,MAAAA,IAEpBM,EAAO,CAAEJ,SAAAA,EAAUF,MAAAA,KAEpBA,KAXPZ,EAAKM,UAAUK,iBAAiB,QAASI,GAgBzC,IAAK,IAAIO,EAAI,EAAGA,EAAItB,EAAKK,YAAYQ,MAAOS,IAAK,CAC3ClB,MAAAA,EAAiBkB,EAAItB,EAAKI,eAAeS,MAAQb,EAAKC,gBAAgBY,MAC5EU,YAAY,KACZR,EAAcO,EAAI,EAAGlB,GAAgBoB,KAAK,EAAGV,SAAAA,EAAUF,MAAAA,0BAAkCE,QAAeF,OACvGa,MAAM,EAAGX,SAAAA,EAAUF,MAAAA,yBAAiCE,QAAeF,QACjER,GAGHW,EAAc,EAAG,MAChBS,KAAK,EAAGV,SAAAA,EAAUF,MAAAA,MACnBc,QAAQC,2BAA2Bb,QAAeF,SAEjDa,MAAM,EAAGX,SAAAA,EAAUF,MAAAA,MACpBc,QAAQC,0BAA0Bb,QAAeF","file":"03-promises.5009c69a.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  inputFirstDelay: document.querySelector('input[name=\"delay\"]'),\n  inputStepDelay: document.querySelector('input[name=\"step\"]'),\n  inputAmount: document.querySelector('input[name=\"amount\"]'),\n  btnSubmit: document.querySelector('button'),\n  form: document.querySelector('.form'),\n};\nrefs.form.addEventListener('click', hendlChange);\nfunction hendlChange(e) {\n  e.preventDefault();\n}\nlet delay = refs.inputFirstDelay.value;\nlet position = 0;\n\nrefs.btnSubmit.addEventListener('click', createPromise);\n\nfunction createPromise(position, delay) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  })\n\n}\n\nfor (let i = 0; i < refs.inputAmount.value; i++) {\nconst inputStepDelay = i * refs.inputStepDelay.value + refs.inputFirstDelay.value;\nsetInterval(() => {\ncreatePromise(i + 1, inputStepDelay).then(({ position, delay }) => (`Fulfilled promise ${position} in ${delay}ms`))\n.catch(({ position, delay }) => (`Rejected promise ${position} in ${delay}ms`));\n}, inputStepDelay)\n}\n\ncreatePromise(2, 1500)\n.then(({ position, delay }) => {\nconsole.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n})\n.catch(({ position, delay }) => {\nconsole.log(`❌ Rejected promise ${position} in ${delay}ms`);\n});\n\n\n\n\n\n\n\n\n\n\n\n\n "]}